// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMeetUp.Logic.Infrastructure;

namespace MyMeetUp.Logic.Migrations
{
    [DbContext(typeof(MyMeetupContext))]
    [Migration("20180717143509_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyMeetUp.Logic.Infrastructure.MyMeetupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyMeetUp.Logic.Infrastructure.MyMeetupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.ContenuCharte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actif");

                    b.Property<string>("Categorie")
                        .HasMaxLength(80);

                    b.Property<string>("Contenu");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Position");

                    b.Property<int?>("RencontreId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("RencontreId");

                    b.ToTable("ContenusChartes");

                    b.HasData(
                        new { Id = 1, Actif = true, Categorie = "Animaux", Contenu = "<ul><li>Les chiens sont tolérés, à condition qu'ils restent attachés ou auprès de vous en permanence.</li><li>Ils ne doivent également pas être bruyants.</li></ul>", CreatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc), Position = 1, UpdatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc) },
                        new { Id = 2, Actif = true, Categorie = "Alcool", Contenu = "<ul><li>La consommation d’alcool doit être raisonnée, pour toutes les personnes participantes, quel que soit leur âge, et bien sûr, les parents ou les référents sont invités à être attentifs à cette problématique vis-à-vis des personnes dont ils sont responsables.</li></ul>", CreatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc), Position = 2, UpdatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc) },
                        new { Id = 3, Actif = true, Categorie = "Spécifique à la Taillade", Contenu = "<ul><li>La tradition est née de faire des trous autour du barbecue, il est important de les reboucher au départ des enfants</li></ul>", CreatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc), Position = 1, RencontreId = 1, UpdatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 890, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.Inscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeReservation")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<decimal>("MontantVerse");

                    b.Property<int?>("MyMeetupUserId");

                    b.Property<int>("RencontreId");

                    b.Property<int>("RencontreUserId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("MyMeetupUserId");

                    b.HasIndex("RencontreId");

                    b.ToTable("Inscriptions");
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.ParametrageApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ParametrageApplication");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 891, DateTimeKind.Utc), Titre = "Rencontres Non Scolarisees", UpdatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 891, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.Rencontre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("Date");

                    b.Property<string>("DescriptionInscrit")
                        .IsRequired();

                    b.Property<string>("DescriptionPublique")
                        .IsRequired();

                    b.Property<bool>("EstVisible");

                    b.Property<string>("ImageTitre");

                    b.Property<DateTime>("OuvertInscriptionLe");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.ToTable("Rencontres");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 889, DateTimeKind.Utc), DateDebut = new DateTime(2018, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), DateFin = new DateTime(2018, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), DescriptionInscrit = @"<div><strong>Toutes les inscriptions (locatif ou camping) doivent se faire uniquement par mail &agrave; : francois.fonseca@solincite.org</strong></div>
<div>Vous devrez lui indiquer vos&nbsp;<strong>noms/pr&eacute;noms/adresse postale/nb d&rsquo;adultes+d&rsquo;enfants.</strong></div>
<div><strong>Il n&rsquo;y a qu&rsquo;un seul interlocuteur par logement : un logement est r&eacute;serv&eacute; par une seule famille, c&rsquo;est elle qui fait la r&eacute;servation et paiera la somme totale au village de vacances. </strong>Vous pouvez donc r&eacute;server &agrave; votre nom et trouver d&rsquo;autres familles pour partager, gr&acirc;ce au document Pad mis &agrave; disposition <strong>:&nbsp;</strong><strong><a href=""https://semestriel.framapad.org/p/LaTaillade_qfmnV6VC4B"">https://semestriel.framapad.org/p/LaTaillade_qfmnV6VC4B</a></strong></div>
<div>Ce document servira &agrave; partager toutes les infos sur la rencontre (logements, covoiturage, activit&eacute;s,&hellip;)</div>", DescriptionPublique = "Rencontre près de Casteljaloux(47) du 22 au 29 octobre 2018. Situé dans un écrin de forêt, les hébergements se répartissent entre gîtes, landettes, emplacements pour tentes et camions, et quelques yourtes.", EstVisible = true, ImageTitre = "La-Taillade.jpg", OuvertInscriptionLe = new DateTime(2018, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Titre = "La Taillade 2018", UpdatedAt = new DateTime(2018, 7, 17, 14, 35, 8, 889, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.ResponsableRencontre", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RencontreId");

                    b.HasKey("UserId", "RencontreId");

                    b.HasAlternateKey("RencontreId", "UserId");

                    b.ToTable("ResponsablesRencontres");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.ContenuCharte", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Modeles.Rencontre", "Rencontre")
                        .WithMany()
                        .HasForeignKey("RencontreId");
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.Inscription", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser", "MyMeetupUser")
                        .WithMany()
                        .HasForeignKey("MyMeetupUserId");

                    b.HasOne("MyMeetUp.Logic.Modeles.Rencontre", "Rencontre")
                        .WithMany()
                        .HasForeignKey("RencontreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMeetUp.Logic.Modeles.ResponsableRencontre", b =>
                {
                    b.HasOne("MyMeetUp.Logic.Modeles.Rencontre", "Rencontre")
                        .WithMany("Responsables")
                        .HasForeignKey("RencontreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMeetUp.Logic.Infrastructure.MyMeetupUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
